name: Destroy Infrastructure

on:
  workflow_dispatch:
    inputs:
      confirm_destroy:
        description: 'Type "destroy" to confirm'
        required: true
        type: string
      aws_region:
        description: 'AWS Region where infrastructure is deployed'
        required: true
        type: choice
        options:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - eu-west-1
          - eu-west-2
          - eu-central-1
          - ap-southeast-1
          - ap-southeast-2
          - ap-northeast-1
        default: 'us-east-1'


env:
  AWS_REGION: ${{ github.event.inputs.aws_region }}
  TF_STATE_KEY: "terraform/state/prod/terraform.tfstate"
  PROJECT_NAME: "hrgoat"
  DB_PASSWORD: "hrportaladmin123"

jobs:
  terraform-destroy:
    name: 'Terraform Destroy'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    
    # Only proceed if the user typed "destroy" to confirm
    if: ${{ github.event.inputs.confirm_destroy == 'destroy' }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.0.0

    - name: Validate bucket name
      id: validate_bucket
      run: |
        # Look for buckets with the region-specific pattern
        BUCKET=$(aws s3api list-buckets --query "Buckets[?contains(Name, 'hrgoat-tfstate-do-not-delete-${{ env.AWS_REGION }}')].[Name, CreationDate]" --output json | jq -r 'sort_by(.[1]) | reverse | .[0][0]')
        
        # If no region-specific bucket found, fall back to old pattern for backward compatibility
        if [ -z "$BUCKET" ] || [ "$BUCKET" == "null" ]; then
          echo "No region-specific bucket found, checking for legacy bucket..."
          BUCKET=$(aws s3api list-buckets --query "Buckets[?contains(Name, 'hrgoat-tfstate-do-not-delete')].[Name, CreationDate]" --output json | jq -r 'sort_by(.[1]) | reverse | .[0][0]')
        fi
        
        echo "Using bucket name: ${BUCKET}"
        
        # Check if bucket exists
        if [ -n "$BUCKET" ] && [ "$BUCKET" != "null" ] && aws s3api head-bucket --bucket ${BUCKET} 2>/dev/null; then
          echo "bucket_exists=true" >> $GITHUB_OUTPUT
          echo "bucket_name=${BUCKET}" >> $GITHUB_OUTPUT
          echo "Bucket ${BUCKET} exists."
        else
          echo "bucket_exists=false" >> $GITHUB_OUTPUT
          echo "No Terraform state bucket found for region ${{ env.AWS_REGION }}."
          exit 1
        fi
      


    - name: Check if Terraform state exists
      id: check_state
      if: steps.validate_bucket.outputs.bucket_exists == 'true'
      run: |
        BUCKET_NAME="${{ steps.validate_bucket.outputs.bucket_name }}"
        
        if aws s3api head-object --bucket ${BUCKET_NAME} --key ${{ env.TF_STATE_KEY }} 2>/dev/null; then
          echo "state_exists=true" >> $GITHUB_OUTPUT
        else
          echo "state_exists=false" >> $GITHUB_OUTPUT
          echo "No Terraform state found. Nothing to destroy."
        fi

    - name: Terraform Init
      if: steps.check_state.outputs.state_exists == 'true'
      run: |
        cd terraform
        terraform init \
          -backend-config="bucket=${{ steps.validate_bucket.outputs.bucket_name }}" \
          -backend-config="key=${{ env.TF_STATE_KEY }}" \
          -backend-config="region=${{ env.AWS_REGION }}"

    - name: Terraform Plan Destroy
      if: steps.check_state.outputs.state_exists == 'true'
      run: |
        cd terraform
        terraform plan -destroy -var="project_name=${{ env.PROJECT_NAME }}" -var="db_password=${{ env.DB_PASSWORD }}" -var="aws_region=${{ env.AWS_REGION }}" -out=tfdestroyplan

    - name: Terraform Destroy
      if: steps.check_state.outputs.state_exists == 'true'
      run: |
        cd terraform
        terraform apply -auto-approve tfdestroyplan
        echo "Infrastructure has been successfully destroyed."

    - name: Cleanup Terraform State and Bucket
      if: steps.check_state.outputs.state_exists == 'true'
      run: |
        BUCKET_NAME="${{ steps.validate_bucket.outputs.bucket_name }}"
        
        # Remove all objects in the bucket
        echo "Removing all objects from bucket ${BUCKET_NAME}..."
        aws s3 rm s3://${BUCKET_NAME} --recursive
        
        # Remove bucket policy to allow deletion
        echo "Removing bucket policy..."
        aws s3api delete-bucket-policy --bucket ${BUCKET_NAME}
        
        # Disable versioning
        echo "Disabling versioning..."
        aws s3api put-bucket-versioning --bucket ${BUCKET_NAME} --versioning-configuration Status=Suspended
        aws s3api list-object-versions --bucket ${BUCKET_NAME} --query='{Objects: Versions[].{Key:Key,VersionId:VersionId}}' --output json  
        aws s3api delete-objects --bucket ${BUCKET_NAME} --delete "$(aws s3api list-object-versions --bucket ${BUCKET_NAME} --query='{Objects: Versions[].{Key:Key,VersionId:VersionId}}' --output json)"
        aws s3api delete-objects --bucket ${BUCKET_NAME} --delete "$(aws s3api list-object-versions --bucket ${BUCKET_NAME} --query='{Objects: DeleteMarkers[].{Key:Key,VersionId:VersionId}}' --output json)"

        # Delete the bucket
        echo "Deleting bucket..."
        aws s3api delete-bucket --bucket ${BUCKET_NAME}
        
        echo "Terraform state and bucket have been removed." 